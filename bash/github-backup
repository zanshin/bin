#!/usr/bin/env bash

set -euo pipefail

# Check if GITHUB_TOKEN is set
if [[ -z "${GITHUB_TOKEN:-}" ]]; then
    echo "❌ Error: GITHUB_TOKEN environment variable is not set."
    exit 1
fi

BACKUP_DIR="./github_backup"
PER_PAGE=100
RETRY_DELAY=5

mkdir -p "$BACKUP_DIR"

# Function to perform a GET request with robust error handling and pagination support
fetch_all_pages() {
    local url="$1"
    local output_file="$2"
    local page=1
    local temp_file="${output_file}.tmp"
    > "$temp_file"

    while true; do
        echo "Fetching page $page: $url&page=$page"
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$url&page=$page")
        body=$(echo "$response" | sed -e 's/HTTPSTATUS\:.*//g')
        status=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

        case "$status" in
            200)
                if [[ "$(echo "$body" | jq length)" == "0" ]]; then
                    echo "No more data on page $page."
                    break
                fi
                echo "$body" | jq '.[]' >> "$temp_file"
                ((page++))
                ;;
            404|403|410)
                echo "Endpoint returned $status. Skipping this resource."
                break
                ;;
            *)
                echo "Unexpected status $status. Retrying in $RETRY_DELAY seconds..."
                sleep $RETRY_DELAY
                ;;
        esac
    done

    if [[ -s "$temp_file" ]]; then
        jq -s '.' "$temp_file" > "$output_file"
    else
        echo "[]" > "$output_file"
    fi
    rm -f "$temp_file"
}

# Get all repositories
echo "Fetching all repositories..."
ALL_REPOS_FILE="$BACKUP_DIR/all_repos.json"
fetch_all_pages "https://api.github.com/user/repos?per_page=$PER_PAGE&type=all" "$ALL_REPOS_FILE"

REPOS=$(jq -r '.[].full_name' "$ALL_REPOS_FILE")

for REPO in $REPOS; do
    echo "🔄 Backing up: $REPO"

    REPO_DIR="${BACKUP_DIR}/${REPO//\//_}"
    mkdir -p "$REPO_DIR"

    # Clone repo
    if [[ ! -d "$REPO_DIR/repo.git" ]]; then
        echo "Cloning repository..."
        git clone --mirror "https://$GITHUB_TOKEN@github.com/$REPO.git" "$REPO_DIR/repo.git"
    else
        echo "Repository already cloned, pulling updates..."
        (cd "$REPO_DIR/repo.git" && git remote update)
    fi

    # Clone wiki if exists
    if git ls-remote --exit-code "https://$GITHUB_TOKEN@github.com/$REPO.wiki.git" &> /dev/null; then
        if [[ ! -d "$REPO_DIR/wiki" ]]; then
            echo "Cloning wiki..."
            git clone "https://$GITHUB_TOKEN@github.com/$REPO.wiki.git" "$REPO_DIR/wiki"
        else
            echo "Wiki already cloned, pulling updates..."
            (cd "$REPO_DIR/wiki" && git pull)
        fi
    else
        echo "No wiki found."
    fi

    # Backup Issues
    echo "Fetching issues..."
    fetch_all_pages "https://api.github.com/repos/$REPO/issues?state=all&per_page=$PER_PAGE" "$REPO_DIR/issues.json"

    # Backup Pull Requests
    echo "Fetching pull requests..."
    fetch_all_pages "https://api.github.com/repos/$REPO/pulls?state=all&per_page=$PER_PAGE" "$REPO_DIR/pull_requests.json"

    # Backup Releases
    echo "Fetching releases..."
    fetch_all_pages "https://api.github.com/repos/$REPO/releases?per_page=$PER_PAGE" "$REPO_DIR/releases.json"

    # Backup Projects (handle special Accept header)
    echo "Fetching projects..."
    fetch_all_pages "https://api.github.com/repos/$REPO/projects?per_page=$PER_PAGE" "$REPO_DIR/projects.json"

    echo "✅ Backup completed for $REPO"
done

echo "🎉 All repositories backed up successfully."
